#include <avr/io.h>        // Biblioteca para operações de I/O
#include <avr/interrupt.h> // Biblioteca para interrupções

// ---------- Pinos ----------
#define LED_DDR      DDRD       // Define que os pinos PD0 a PD7 são para saída
#define LED_PORT     PORTD      // Port para LEDs

#define BUTTON_DDR   DDRB       // Define os pinos PB0, PB1 e PB2 como entrada para botões
#define BUTTON_PORT  PORTB      // Port para os botões
#define BUTTON_PIN   PINB       // Pinos de leitura dos botões
#define BOT1_PIN     PB0        // Botão do jogador 1
#define BOT2_PIN     PB1        // Botão do jogador 2
#define BOT_RST_PIN  PB2        // Botão de reset/start

#define BUZZER_DDR   DDRB       // Define o pino PB3 como saída para o buzzer
#define BUZZER_PORT  PORTB      // Port do buzzer
#define BUZZER_PIN   PB3        // Pino do buzzer

// ---------- Estados ----------
volatile uint8_t estado_jogo = 0;         // Estado do jogo: 0=parado, 1=jogando, 2=fim
volatile uint8_t buzzer_estado = 0;       // Estado do buzzer: para sequência de bipes
volatile uint16_t buzzer_timer = 0;      // Timer para controlar o tempo do buzzer

// ---------- Jogo ----------
volatile uint8_t led_brightness[8] = {0}; // Controle de brilho de cada LED (0-255)
volatile uint8_t leds_p1 = 0, leds_p2 = 0; // Quantidade de LEDs preenchidos por jogador
volatile uint8_t score_p1 = 0, score_p2 = 0; // Contagem de cliques por LED para cada jogador

// ---------- PWM Software ----------
void pwm_software() {
  // Loop para controlar o brilho dos LEDs (PWM)
  for (uint8_t t = 0; t < 255; t++) {
    for (uint8_t i = 0; i < 8; i++) {
      if (led_brightness[i] > t)  // Se o brilho for maior que o valor do contador
        LED_PORT |= (1 << i);     // Acende o LED
      else
        LED_PORT &= ~(1 << i);    // Desliga o LED
    }
  }
}

// ---------- Setup ----------
void setup_io() {
  // Configura os pinos de LEDs como saída
  LED_DDR = 0xFF;
  LED_PORT = 0x00;    // Desliga todos os LEDs inicialmente

  // Configura os pinos dos botões como entrada com pull-up
  BUTTON_DDR &= ~((1 << BOT1_PIN) | (1 << BOT2_PIN) | (1 << BOT_RST_PIN));
  BUTTON_PORT |= (1 << BOT1_PIN) | (1 << BOT2_PIN) | (1 << BOT_RST_PIN); // Ativa pull-up

  // Configura o pino do buzzer como saída e desliga o buzzer
  BUZZER_DDR |= (1 << BUZZER_PIN);
  BUZZER_PORT &= ~(1 << BUZZER_PIN);
}

// ---------- Configuração do Timer1 ----------
void setup_timer1() {
  // Configura o Timer1 em modo CTC (Clear Timer on Compare Match) com prescaler 64
  TCCR1A = 0;                            // Configuração do Timer1
  TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);  // CTC, prescaler 64
  OCR1A = 249;                            // 1ms, com prescaler de 64
  TIMSK1 |= (1 << OCIE1A);               // Habilita a interrupção para Timer1
}

// ---------- Função de reset do jogo ----------
void reset_jogo() {
  leds_p1 = leds_p2 = score_p1 = score_p2 = 0;  // Zera o jogo
  for (int i = 0; i < 8; i++) led_brightness[i] = 0; // Zera os LEDs
}

// ---------- Sequência de bipes ----------
ISR(TIMER1_COMPA_vect) {
  buzzer_timer++;  // Incrementa o tempo do buzzer a cada 1ms

  // Bipes de largada (sequência de 6 etapas)
  switch (buzzer_estado) {
    case 1: 
      if (buzzer_timer == 1) BUZZER_PORT |= (1 << BUZZER_PIN);  // Bipe 1: Liga o buzzer
      break;
    case 2: 
      if (buzzer_timer == 150) {  // Bipe 1: Desliga o buzzer
        BUZZER_PORT &= ~(1 << BUZZER_PIN);
        buzzer_estado++; buzzer_timer = 0;
      }
      break;
    case 3: 
      if (buzzer_timer == 100) {  // Bipe 2: Liga o buzzer
        BUZZER_PORT |= (1 << BUZZER_PIN);
        buzzer_estado++; buzzer_timer = 0;
      }
      break;
    case 4: 
      if (buzzer_timer == 150) {  // Bipe 2: Desliga o buzzer
        BUZZER_PORT &= ~(1 << BUZZER_PIN);
        buzzer_estado++; buzzer_timer = 0;
      }
      break;
    case 5: 
      if (buzzer_timer == 100) {  // Bipe 3: Liga o buzzer
        BUZZER_PORT |= (1 << BUZZER_PIN);
        buzzer_estado++; buzzer_timer = 0;
      }
      break;
    case 6: 
      if (buzzer_timer == 500) {  // Bipe 3: Desliga o buzzer e inicia o jogo
        BUZZER_PORT &= ~(1 << BUZZER_PIN);
        buzzer_estado = 0;
        buzzer_timer = 0;
        estado_jogo = 1;  // Inicia o jogo
      }
      break;
  }

  // Bipes de fim de jogo (final)
  if (buzzer_estado == 10 && buzzer_timer == 1) {
    BUZZER_PORT |= (1 << BUZZER_PIN);  // Liga o buzzer
    buzzer_estado++;  // Muda o estado
  }
  if (buzzer_estado == 11 && buzzer_timer == 500) {
    BUZZER_PORT &= ~(1 << BUZZER_PIN);  // Desliga o buzzer
    buzzer_estado = 0;
    estado_jogo = 2;  // Fim do jogo
    buzzer_timer = 0;
  }
}

// ---------- Main ----------
int main(void) {
  setup_io();    // Configura os pinos
  setup_timer1(); // Configura o Timer1
  sei();         // Habilita as interrupções globais

  const uint8_t ordem_p1[4] = {0, 1, 2, 3};  // Ordem dos LEDs do jogador 1
  const uint8_t ordem_p2[4] = {7, 6, 5, 4};  // Ordem dos LEDs do jogador 2

  while (1) {
    // Botão de Start pressionado
    if (!(BUTTON_PIN & (1 << BOT_RST_PIN)) && (estado_jogo == 0 || estado_jogo == 2) && buzzer_estado == 0) {
      reset_jogo();  // Reseta o jogo
      buzzer_estado = 1;  // Inicia sequência de bipes
      buzzer_timer = 0;
    }

    // Jogador 1
    if (estado_jogo == 1 && !(BUTTON_PIN & (1 << BOT1_PIN))) {
      if (score_p1 < 10) {
        score_p1++;
        led_brightness[ordem_p1[leds_p1]] = score_p1 * 25;
        while (!(BUTTON_PIN & (1 << BOT1_PIN)));  // Espera soltar
        if (score_p1 >= 10) {
          leds_p1++;
          score_p1 = 0;
          if (leds_p1 >= 4 && buzzer_estado == 0) {
            buzzer_estado = 10;
            buzzer_timer = 0;
          }
        }
      }
    }

    // Jogador 2
    if (estado_jogo == 1 && !(BUTTON_PIN & (1 << BOT2_PIN))) {
      if (score_p2 < 10) {
        score_p2++;
        led_brightness[ordem_p2[leds_p2]] = score_p2 * 25;
        while (!(BUTTON_PIN & (1 << BOT2_PIN)));  // Espera soltar
        if (score_p2 >= 10) {
          leds_p2++;
          score_p2 = 0;
          if (leds_p2 >= 4 && buzzer_estado == 0) {
            buzzer_estado = 10;
            buzzer_timer = 0;
          }
        }
      }
    }

    // Vitória → mantém LEDs acesos
    if (estado_jogo == 2) {
      for (int i = 0; i < 4; i++) {
        led_brightness[ordem_p1[i]] = (leds_p1 >= 4) ? 255 : 0;
        led_brightness[ordem_p2[i]] = (leds_p2 >= 4) ? 255 : 0;
      }
    }

    pwm_software(); // Atualiza LEDs com brilho
  }
}